import sys
import os
import string
import SCons

Default('.')

def RequireList(env, var):
    if not env.Dictionary().has_key(var):
        env[var] = []
    elif not SCons.Util.is_List(env[var]):
        env[var] = [env[var]]

# Courtesy of Ben Scott
def ParseConfig(env, command, options):
    "Parses xxx-config style output for compilation directives"

    # Run the command
    where = WhereIs(command)
    if not where:
        print '%s not found in PATH' % command
        sys.exit(-1)
    print "Found " + str(command) + ": " + where
    cmd = where + ' ' + string.join(options)
    params = string.split(os.popen(cmd).read())

    # Parse its output
    for arg in params:
        switch = arg[0:1]
        option = arg[1:2]
        if switch == '-':
            if option == 'I':
                RequireList(env, 'CPPPATH')
                env['CPPPATH'].append(arg[2:])
            elif option == 'L':
                RequireList(env, 'LIBPATH')
                env['LIBPATH'].append(arg[2:])
            elif option == 'l':
                RequireList(env, 'LIBS')
                env['LIBS'].append(arg[2:])
            elif arg[0:11] == '-Wl,-rpath,':
                RequireList(env, 'LINKFLAGS')
                env['LINKFLAGS'].append(arg)
            else:
                RequireList(env, 'CXXFLAGS')
                env['CXXFLAGS'].append(arg)
        else:
            # Must be a static library, add it to the libs
            RequireList(env, 'LIBS')
            env['LIBS'].append(arg)

        RequireList(env, 'LIBS')
        env['LIBS'].extend(['SDL', 'SDLmain'])
        
def SetupAudiere(env):
    RequireList(env, 'LIBS')
    env['LIBS'].extend(['audiere', 'vorbisfile', 'vorbis', 'ogg'])

def SetupCorona(env):
    RequireList(env, 'LIBS')
    env['LIBS'].extend(['corona', 'png', 'z', 'jpeg'])

def SetupGL(env):
    RequireList(env, 'LIBS')
    if sys.platform == 'cygwin':
        env['LIBS'].extend(['glu32', 'opengl32'])
    else:
        env['LIBS'].extend(['GLU', 'GL'])

def SetupJS(env):
    env.Append(LIBPATH = [Dir('#/third-party/lib')],
               LIBS = ['js32'])

def SetupMNG(env):
    env.Append(LIBS = ['mng', 'jpeg'])

def SetupZLib(env):
    env.Append(LIBS = ['z'])

#def SetupSDL(env):
#    if sys.platform == 'cygwin':
#        env.Append(CPPPATH = '/usr/local/include/SDL')
#    else:
#        ParseConfig(env, 'sdl-config', Split('--cflags --libs'))

Export('SetupAudiere SetupCorona SetupGL SetupJS SetupMNG SetupZLib')

base_env = Environment(ENV = os.environ)

if sys.platform == 'cygwin':
    base_env.Append(CCFLAGS = ['-DCOR_CALL=',
                               '-DADR_CALL=',
                               '-DWIN32',
                               '-D_WIN32',
                               '-DCYGWIN',
                               '-DXP_PC'],
                    CPPPATH = [Dir('third-party/include')],
                    LIBPATH = [Dir('third-party/lib')])

Export('base_env')

SConscript(dirs = ['source'])
