import sys
import os
import string
import SCons

Default('.')

def RequireList(env, var):
    if not env.Dictionary().has_key(var):
        env[var] = []
    elif not SCons.Util.is_List(env[var]):
        env[var] = [env[var]]

# Courtesy of Ben Scott
def ParseConfig(env, command, options):
    "Parses xxx-config style output for compilation directives"

    # Run the command
    where = WhereIs(command)
    if not where:
        print '%s not found in PATH' % command
        sys.exit(-1)
    print "Found " + str(command) + ": " + where
    cmd = where + ' ' + string.join(options)
    params = string.split(os.popen(cmd).read())

    # Parse its output
    for arg in params:
        switch = arg[0:1]
        option = arg[1:2]
        if switch == '-':
            if option == 'I':
                RequireList(env, 'CPPPATH')
                env['CPPPATH'].append(arg[2:])
            elif option == 'L':
                RequireList(env, 'LIBPATH')
                env['LIBPATH'].append(arg[2:])
            elif option == 'l':
                RequireList(env, 'LIBS')
                env['LIBS'].append(arg[2:])
            elif arg[0:11] == '-Wl,-rpath,':
                RequireList(env, 'LINKFLAGS')
                env['LINKFLAGS'].append(arg)
            else:
                RequireList(env, 'CXXFLAGS')
                env['CXXFLAGS'].append(arg)
        else:
            # Must be a static library, add it to the libs
            RequireList(env, 'LIBS')
            env['LIBS'].append(arg)

        RequireList(env, 'LIBS')
        env['LIBS'].extend(['SDL', 'SDLmain'])
        
def SetupAudiere(env):
    RequireList(env, 'LIBS')
    env['LIBS'].extend(['audiere'])

def SetupCorona(env):
    RequireList(env, 'LIBS')
    env['LIBS'].extend(['corona'])

def SetupGL(env):
    RequireList(env, 'LIBS')
    if sys.platform == 'cygwin':
        env['LIBS'].extend(['glu32', 'opengl32'])
    else:
        env['LIBS'].extend(['GLU', 'GL'])

def SetupJS(env):
    env.Append(LIBPATH = [Dir('#/third-party/lib')],
               LIBS = ['js32'])

def SetupMNG(env):
    env.Append(LIBS = ['mng', 'jpeg', 'z'])
    if sys.platform == 'cygwin':
        env.Append(
            CCFLAGS = ['-DMNG_NO_CMS', '-DMNG_SUPPORT_LC', '-DMNG_DLL'])

def SetupSphereCommon(env):
    env.Append(CPPPATH = ['#/source/common'],
               LIBPATH = ['#/source/common'],
               LIBS = ['common'])

def SetupWXWindows(env):
    env.Append(
        CCFLAGS = ['-D__GNUWIN32__', '-D__WXMSW__', '-D__WIN32__',
                   '-D__WIN95__', '-DSTRICT', '-DWIN32_LEAN_AND_MEAN'],
        LIBS = ['stc', 'wxmsw', 'gdi32', 'comctl32', 'comdlg32',
                'ole32', 'uuid', 'ws2_32'])

def SetupZLib(env):
    if sys.platform == 'cygwin':
        env.Append(CCFLAGS = ['-DWINDOWS', '-DZLIB_DLL'])
    env.Append(LIBS = ['z'])

Export("""SetupAudiere SetupCorona SetupGL SetupJS SetupMNG SetupSphereCommon
          SetupWXWindows SetupZLib""")

base_env = Environment(ENV = os.environ)

if sys.platform == 'cygwin':
    base_env['SHLIBPREFIX'] = ''
    base_env['SHLIBSUFFIX'] = '.dll'
    base_env['SHCCFLAGS']   = ['$CCFLAGS']
    base_env['SHCXXFLAGS']  = ['$CXXFLAGS']
    base_env['LINKFLAGS']   = ['-mno-cygwin']
    base_env['SHLINKFLAGS'] = [
        '-shared', '-Wl,--enable-stdcall-fixup', '$LINKFLAGS']
    base_env.Append(
        _RESINCFLAGS = '$( ${_concat("--include-dir ", RESPATH, "", locals(), globals())} $)',
        CCFLAGS = ['-DWIN32', '-D_WIN32', '-DCYGWIN', '-DXP_PC',
                   '-mno-cygwin', '-Wall', '-Wno-non-virtual-dtor'],
        CPPPATH = [Dir('third-party/include')],
        RESPATH = [Dir('third-party/include')],
        LIBPATH = [Dir('third-party/lib')])
    base_env['BUILDERS']['Resource'] = Builder(
        action = 'windres -O coff --define CYGWIN $_RESINCFLAGS $SOURCE -o $TARGET')

if ARGUMENTS.get('debug'):
    base_env.Append(
        CCFLAGS = ['-DDEBUG', '-g'],
        LINKFLAGS = ['-g'])
elif ARGUMENTS.get('opt'):
    base_env.Append(
        CCFLAGS = ['-O2'],
        LINKFLAGS = ['-s'])

Export('base_env')

SConscript(dirs = ['source', 'startup', 'system'])

# install third-party DLLs into build directory
dlls = Split("audiere.dll corona.dll js32.dll libmng.dll zlib.dll")
for d in dlls:
    base_env.Install("#/build", os.path.join('third-party/dlls', d))
    base_env.Install("#/build/util", os.path.join('third-party/dlls', d))
