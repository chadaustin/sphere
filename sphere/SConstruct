import sys
import os
import string
import SCons
import autocons

###########################################################

def BuildLinuxEnv():
    env = Environment(ENV = os.environ)
    env['BUILD_DIR'] = "#/build/linux"

    if ARGUMENTS.get('debug'):
        env.Append(
            CCFLAGS = ['-DDEBUG', '-g'],
            LINKFLAGS = ['-g'])
    elif ARGUMENTS.get('opt'):
        env.Append(
            CCFLAGS = ['-O2', '-s'],
            LINKFLAGS = ['-s'])

    # no write_mng support for linux
    env.Append(CXXFLAGS = ['-DNO_WRITE_MNG'])

    return env

###########################################################

class Compiler:
    def __init__(self, name):
        if not name in ['linux']:
            raise ValueError, "Invalid compiler specified"

        self.name = name

        if name == 'linux':
            self.env = BuildLinuxEnv()

    def __str__(self):
        return self.name

    def is_unix(self):
        return self.name in ['linux']

    def needs_sdl(self):
        return self.name in ['linux']

    def get_env(self):
        return self.env

    def UnixSubsystem(self, env):
      env.Append(CPPPATH = ['#/source/engine/unix'],
                 LIBPATH = ['#/source/engine/unix'],
                 LIBS = ['unix'])

    def SetupAudiere(self, env):
        env.Append(LIBS = ['audiere'])

    def SetupCorona(self, env):
        env.Append(LIBS = ['corona'])

    def SetupHTMLHelp(self, env):
        env.Append(LIBS = ['htmlhelp'])

    def SetupJS(self, env):
        if self.name == 'linux':
            env.Append(CCFLAGS = ['-DXP_UNIX'])
            if os.path.exists('/usr/include/smjs'):
                env.Append(LIBS = ['smjs'])
                env.Append(CPPPATH = [Dir('/usr/include/smjs')])
            elif os.path.exists('/usr/include/js'):
                env.Append(LIBS = ['js'])
                env.Append(CPPPATH = [Dir('/usr/include/js')])
            elif os.path.exists('/usr/include/mozjs'):
                env.Append(LIBS = ['mozjs'])
                env.Append(CPPPATH = [Dir('/usr/include/mozjs')])

    def SetupMNG(self, env):
        if self.name == 'linux':
            env.Append(LIBS = ['mng', 'jpeg', 'z'])

    def SetupSDL(self, env):
        if self.name == 'linux':
            autocons.ParseConfig(env, 'sdl-config', ['--cflags', '--libs'])

    def SetupWXWidgets(self, env):
        if self.name == 'linux':
            autocons.ParseConfig(env, 'wx-config', ['--cppflags', '--libs'])

    def SetupSphereCommon(self, env):
        env.Append(CPPPATH = ['#/source/common'],
                   LIBPATH = ['#/source/common'],
                   LIBS = ['common'])

    def SetupParticleEngine(self, env):
        env.Append(CPPPATH = ['#/source/particle_engine'],
                   LIBPATH = ['#/source/particle_engine'],
                   LIBS = ['particle_engine'])

###########################################################

env = Environment(ENV = os.environ)
if string.find(sys.platform, 'linux') != -1:
    default_compiler = 'linux'
elif string.find(sys.platform, 'freebsd') != -1:
    default_compiler = 'linux'
else:
    print "Can't determine default compiler!  Defaulting to Linux..."
    default_compiler = 'linux'

###########################################################

print "os.name:", os.name;

COMPILER = Compiler(ARGUMENTS.get('compiler', default_compiler))

print "Using compiler:", str(COMPILER)

if ARGUMENTS.get('debug'):
  compile_mode = "debug";
elif ARGUMENTS.get('opt'):
  compile_mode = "optimized";
else:
   compile_mode = "";

if compile_mode != "":
  print "Compiling in", compile_mode, "mode";

base_env = COMPILER.get_env()

# common options
base_env.Append(CXXFLAGS = ['-DUNIX'])

BUILD_DIR = base_env['BUILD_DIR']
Default(BUILD_DIR)

Export('base_env BUILD_DIR COMPILER')


SConscript(dirs = ['docs', 'source', 'startup', 'system'])
