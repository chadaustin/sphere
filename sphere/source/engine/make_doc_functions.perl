#!/usr/bin/perl -w
use strict;

###########################################################

die "Usage: $0 <type>\n"
   . "  e.g. $0 txt > doc_functions.txt\n"
   . "  e.g. $0 html > doc_functions.html\n" unless (@ARGV == 1);

my $output_type = $ARGV[0];

sub is_html {
  return $output_type eq "html";
}

###########################################################

sub fix_line_endings {
  my ($line) = @_;
  my @lines = split(/\n/, $line);

  foreach my $line (@lines) {
    $line =~ s/\s/&nbsp;/g;
  }
  
  my $seperator = "\n";
  
  if (&is_html()) {
    $seperator = "<br>\n";
  }
  
  return join($seperator, @lines);
}

###########################################################

sub function_to_string {
  my ($func_name, $func_minargs, $desc_text, @func_args) = @_;
  my $line = "";
  
  if (&is_html()) {
    $line .= "<a name=\"$func_name\">";
  }
  
  $line .= "$func_name";
  if (&is_html()) {
    $line .= "</a>";
  }
  
  $line .= "(";

  my $open_bracket = 0;
  for (my $i = 0; $i <= $#func_args; $i++) {

    my $no_comma = 0;

    if ($i >= $func_minargs) {
      if ($open_bracket == 0) {
        if ($i == 0) {
          $line .= "[";
        }
        else {
          $line .= " [, ";
        }
      }
      $open_bracket = 1;
      $no_comma = 1;
    }

    if ($no_comma == 0) {
      if ($i > 0 && $i <= $#func_args) {
        $line .= ", ";
      }
    }

    $line .= $func_args[$i];
  }

  if ($open_bracket == 1) {
    $line .= "]";
  }
  $line .= ")\n";

  if ($desc_text ne "") {
    if (is_html()) {
      $line .= "<br>\n";    
    }  
    $line .= &fix_line_endings($desc_text);
  }

  if (is_html()) {
    $line .= "<br>";
  }
  $line .= "\n";

  return $line;
}

###########################################################

sub method_to_string {
  my ($func_name, $func_minargs, $desc_text, @func_args) = @_;
  my $line = function_to_string($func_name, $func_minargs, $desc_text, @func_args);
  my @lines = split(/\n/, $line);

  my $prefix = "  ";
  if (is_html()) {
    $prefix = "&nbsp;&nbsp;";
  }
  foreach my $line (@lines) {
    $line = $prefix . $line;
  }
  
  my $seperator = "\n";

  if (&is_html()) {
    $seperator = "<br>\n";
  }

  return join("", @lines) . $seperator;
}

###########################################################

sub ssobject_name_to_jsobject_name {
  my ($method_object) = @_;

  my @ss_names = ("SS_IMAGE", "SS_WINDOWSTYLE", "SS_SURFACE",
                  "SS_FONT", "SS_SOUND", "SS_SPRITESET",
                  "SS_FILE", "SS_LOG", "SS_SOCKET", "SS_ANIMATION",
                  "SS_RAWFILE", "SS_BYTEARRAY", "SS_MAPENGINE");

  my @js_names = ("image", "windowstyle", "surface",
                  "font", "sound", "spriteset",
                  "file", "log", "socket", "animation",
                  "rawfile", "bytearray", "mapengine");

  for (my $i = 0; ($i <= $#js_names && $i <= $#ss_names); $i++) {
    if ($ss_names[$i] eq $method_object) {
      $method_object = $js_names[$i];
      last;
    }
  }
  
  return $method_object;
}

###########################################################

sub ssobject_method_to_jsobject_method {
  my ($method_name) = @_;
  
  my @list = qw(ssSocket ssLog ssSpriteset ssSound ssFont ssWindowStyle ssImage ssSurface ssAnimation ssFile ssByteArray ssRawFile ssMapEngine);

  for (my $i = 0; $i <= $#list; $i++) {
    my $str = $list[$i];

    if ($method_name =~ m/^$str(.*)/) {
      $method_name = $1;
      $method_name = lcfirst($method_name);
      last;
    }
  }
  
  return $method_name;
}

###########################################################

sub make_docs {
  my $filename = "script.cpp";
  open(IN, $filename) || die("failed to open $filename");
  my @lines = <IN>;
  close(IN) || die("failed to close $filename");

  my $in_func = 0;
  my $in_method = 0;
  my @args = ();

  my $func_name = "";
  my $func_minargs = 0;

  my $method_name = "";
  my $method_object = "";
  my $prev_method_object = "";
  my $method_minargs = 0;
  
  my $desc_text = "";
  my $in_comment = 0;
  
  print "This file is automatically generated, do not edit!\n"; if (&is_html()) { print "<br>"; }

  foreach my $line (@lines) {

    my $no_desc_text = 0;
    
    # // section: section_name //
    if ($line =~ m/\/\/ section: (.*?) \/\//) {
      if (is_html()) { print "<br>"; }
      print "\n*** $1 ***\n";
      if (is_html()) { print "<br>"; }
    }

    if ($in_comment == 0 && $in_func == 0 && $in_method == 0) {
      # /**
      if ($line =~ m/(\s*)\/\*\*/) {
        $in_comment = 1;
        $no_desc_text = 1;
      }
    }
    
    if ($in_comment == 1) {
      # */
      if ($line =~ m/(\s*)\*\//) {
        $no_desc_text = 1;
        $in_comment = 0;
      }
    }
    
    if (!$no_desc_text && $in_comment == 1) {
      $desc_text .= $line;
    }

    if ($in_func == 0) {

      # begin_func(func_name, minargs)
      if ($line =~ m/begin_func\((.*?), (.*?)\)/) {
        $in_func = 1;
        $func_name = $1;
        $func_minargs = $2;
      }
      
    }
    
    if ($in_method == 0) {

      # begin_method(Object, method_name, minargs)
      if ($line =~ m/begin_method\((.*?), (.*?), (.*?)\)/) {
        $in_method = 1;
        $method_object = $1;
        $method_name = $2;
        $method_minargs = $3;
      }
    
    }
    
    if ($in_func == 1 || $in_method == 1) {
    
      # arg_str(name)
      if ($line =~ m/arg_str\((.*?)\)/) {
        push(@args, "$1");
      }
      # name = argStr(cx, val)
      if ($line =~ m/\s*(.*?) = argStr\((.*?), (.*?)\)/) {
        push (@args, "$1");
      }      

      # arg_int(name)
      if ($line =~ m/arg_int\((.*?)\)/) {
        push(@args, "$1");
      }
      # name = argInt(cx, val)
      if ($line =~ m/\s*(.*?) = argInt\((.*?), (.*?)\)/) {
        push (@args, "$1");
      }      

      # arg_bool(name)
      if ($line =~ m/arg_bool\((.*?)\)/) {
        push(@args, "$1");
      }
      # name = argBool(cx, val)
      if ($line =~ m/^\s*(.*?) = argBool\((.*?), (.*?)\)/) {
        push (@args, "$1");
      }
      
      # arg_double(name)
      if ($line =~ m/arg_double\((.*?)\)/) {
        push(@args, "$1");
      }
      # name = argDouble(cx, val)
      if ($line =~ m/^\s*(.*?) = argDouble\((.*?), (.*?)\)/) {
        push (@args, "$1");
      }
    
      # end_func()
      if ($in_func == 1 && $line =~ m/end_func\(\)/) {

        unless ($func_name eq "name") {
          print "\n"; if (&is_html()) { print "<br>"; }
          print function_to_string($func_name, $func_minargs, $desc_text, @args);
        }

        $func_name = "";
        $func_minargs = 0;
        @args = ();
        $in_func = 0;
        $desc_text = "";

      }
      
      # end_method()
      if ($in_method == 1 && $line =~ m/end_method\(\)/) {
        unless ($method_object eq "Object") {
        
          my $name = &ssobject_name_to_jsobject_name($method_object);
          my $prefix = is_html() ? "&nbsp;&nbsp;" : "  ";
        
          if ($prev_method_object ne $method_object) {
            print "\n"; if (&is_html()) { print "<br>"; }
            print uc(&ssobject_name_to_jsobject_name($method_object)) . "\n"; if (&is_html()) { print "<br>"; }
            if ($method_object eq "color") {
              print "$prefix$name.red\n"; if (&is_html()) { print "<br>"; }
              print "$prefix$name.green\n"; if (&is_html()) { print "<br>"; }
              print "$prefix$name.blue\n"; if (&is_html()) { print "<br>"; }
              print "$prefix$name.alpha\n"; if (&is_html()) { print "<br>"; }
            }
            
            if ($method_object eq "SS_IMAGE" || $method_object eq "SS_SURFACE" || $method_object eq "SS_ANIMATION") {
              print "$prefix$name.width\n"; if (&is_html()) { print "<br>"; }
              print "$prefix$name.height\n"; if (&is_html()) { print "<br>"; }
            }
            
            if ($method_object eq "SS_BYTEARRAY") {
              print "$prefix$name" . "[index]\n"; if (&is_html()) { print "<br>"; }
              print "$prefix$name.length\n"; if (&is_html()) { print "<br>"; }
            }
          }
          print method_to_string(&ssobject_name_to_jsobject_name($method_object) . "." . &ssobject_method_to_jsobject_method($method_name), $method_minargs, $desc_text, @args);
        }

        $method_name = "";
        $prev_method_object = $method_object;
        $method_object = "";
        $method_minargs = 0;
        @args = ();
        $in_method = 0;
        $desc_text = "";
      
      }
    }
    
  }
}

###########################################################

&make_docs();
